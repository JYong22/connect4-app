{"version":3,"sources":["Game.js","board.js","screens.js","App.js","index.js"],"names":["Game","props","turn","board","Array","fill","this","i","inProgress","findWin","nextTurn","combination","a","b","c","d","includes","React","Component","game","BoardSlot","className","caption","onClick","Board","boardSlot","num","winningCombo","inProg","move","document","getElementById","textContent","style","color","getElementsByClassName","background","length","id","renderBoardSlot","Home","GamePage","App","ReactDOM","render","StrictMode"],"mappings":"2OA2GeA,E,kDAxGX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,KAAO,SACZ,EAAKC,MAAQ,IAAIC,MAAM,IAAIC,KAAK,MAHlB,E,4CAOlB,WACIC,KAAKJ,KAAqB,WAAdI,KAAKJ,KAAoB,MAAO,W,kBAGhD,SAAKK,GACID,KAAKE,eAIVF,KAAKH,MAAMI,GAAKD,KAAKJ,KAEjBI,KAAKG,WACLH,KAAKI,c,qBAIb,WA+DI,IA9DA,IA8DA,MA9DoB,CAGhB,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,EAAE,GAAG,GAAG,IAGT,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IAEV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IAIV,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IACP,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IAGV,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IAGT,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,GAAG,GAAG,IACT,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IAEV,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,GAAG,GAAG,GAAG,KAIf,eAAsC,CAAjC,IAAMC,EAAW,KAClB,cAAkBA,EAAlB,GAAOC,EAAP,KAASC,EAAT,KAAWC,EAAX,KAAaC,EAAb,KAEA,GAAIT,KAAKH,MAAMS,IAAON,KAAKH,MAAMS,KAAON,KAAKH,MAAMU,IAAMP,KAAKH,MAAMS,KAAON,KAAKH,MAAMW,IAAMR,KAAKH,MAAMS,KAAON,KAAKH,MAAMY,GACrH,OAAOJ,EAGf,OAAO,O,wBAKX,WACI,OAAQL,KAAKG,WAAaH,KAAKH,MAAMa,SAAS,U,GApGnCC,IAAMC,W,OCCrBC,EAAO,IAAInB,EAGToB,E,4JACF,WACI,OACI,qBAAKC,UAAaf,KAAKL,MAAMoB,UAAWC,QAAWhB,KAAKL,MAAMqB,QAASC,QAAWjB,KAAKL,MAAMsB,c,GAHjFN,IAAMC,WAWxBM,E,qKAEF,SAAgBC,EAAUC,GACtB,OACI,cAAC,EAAD,CAAWL,UAAaI,EAAWH,QAAUI,EAAKH,QAAW,WAEjB,IAAII,EAAeR,EAAKV,UACpBmB,EAAST,EAAKX,aAiBlB,GAfIoB,GAIsB,MAAlBT,EAAKhB,MAAMuB,KACXP,EAAKU,KAAKH,GACVI,SAASC,eAAe,eAAeC,YAAcb,EAAKjB,KAAM,UAChE4B,SAASC,eAAe,eAAeE,MAAMC,MAAQf,EAAKjB,KAC1D4B,SAASK,uBAAuB,cAAcT,GAAKO,MAAMG,WAAajB,EAAKhB,MAAMuB,GACjFC,EAAeR,EAAKV,UACpBmB,EAAST,EAAKX,eAKjBoB,EACD,GAAGD,EACK,IAAK,IAAIpB,EAAI,EAAGA,EAAEY,EAAKhB,MAAMkC,OAAQ9B,IAEjCoB,GAAgBA,EAAaX,SAAST,KACtCuB,SAASC,eAAe,eAAeC,YAAc,WAAab,EAAKhB,MAAMI,GAC7EuB,SAASC,eAAe,eAAeE,MAAMC,MAAQf,EAAKhB,MAAMI,SAMxEuB,SAASC,eAAe,eAAeC,YAAc,W,oBAWjH,WACI,IAAIN,EAAM,EACND,EAAY,aAKhB,OACI,sBAAKa,GAAK,MAAV,UACI,sBAAKA,GAAK,SAAV,uBACI,qBAAKA,GAAK,iBACV,qBAAKA,GAAK,cAAV,8BAOJ,sBAAKjB,UAAW,QAAhB,UACKf,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAEhCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAEhCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAEhCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAEhCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAEhCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,KAChCpB,KAAKiC,gBAAgBd,EAAWC,QAErC,qBAAKY,GAAI,SAAT,SACI,qBAAKA,GAAK,iBAAiBf,QAAW,WAAMJ,EAAO,IAAInB,EACX8B,SAASC,eAAe,eAAeC,YAAcb,EAAKjB,KAAM,UAChE,IAAK,IAAIK,EAAI,EAAGA,EAAEY,EAAKhB,MAAMkC,OAAQ9B,IACjCuB,SAASK,uBAAuB,cAAc5B,GAAG0B,MAAMG,WAAa,WAHpH,mC,GAnHAnB,IAAMC,WAmIVM,IChJhB,SAASgB,EAAKvC,GACV,OACI,oBAAIqC,GAAK,WAAT,0BAMR,SAASG,EAASxC,GAEd,OACI,8BACI,cAAC,EAAD,MCQGyC,MAjBf,WAEE,OACE,qBAAKJ,GAAK,OAAV,SACE,gCACE,cAACE,EAAD,IAEA,wBAAQF,GAAK,aAAaf,QAAW,WAAMoB,IAASC,OAAO,cAACH,EAAD,IAAaX,SAASC,eAAe,UAAhG,wBCRRY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASC,eAAe,W","file":"static/js/main.cbf7f01e.chunk.js","sourcesContent":["import React from 'react';\n\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.turn = \"Yellow\"; //starts yellow\n        this.board = new Array(42).fill(null) //fills the board with 42 slots of null\n\n    }\n\n    nextTurn(){ //switches between yellow red\n        this.turn = this.turn === \"Yellow\" ? \"Red\": \"Yellow\"\n    }\n\n    move(i){ //if game is not in progress then no move. if it is go next turn\n        if (!this.inProgress()){\n            return;\n        }   \n        //board slot = this turn\n        this.board[i] = this.turn;\n        //if cannot find a winning combo then go next turn\n        if(!this.findWin()){\n            this.nextTurn();\n        }\n    }\n\n    findWin(){ //This has all the possible horizontal and vertical wins\n        const connect4Win = [\n            //vertical winnings\n            //rows 1-4\n            [0,7,14,21],\n            [1,8,15,22],\n            [2,9,16,23],\n            [3,10,17,24],\n            [4,11,18,25],\n            [5,12,19,26],\n            [6,13,20,27],\n\n            //rows 2-5\n            [7,14,21,28],\n            [8,15,22,29],\n            [9,16,23,30],\n            [10,17,24,31],\n            [11,18,25,32],\n            [12,19,26,33],\n            [13,20,27,34],\n            //rows 3-6\n            [14,21,28,35],\n            [15,22,29,36],\n            [16,23,30,37],\n            [17,24,31,38],\n            [18,25,32,39],\n            [19,26,33,40],\n            [20,27,34,41],\n\n            //horizontal winnings\n            //column 1-4\n            [0,1,2,3],\n            [7,8,9,10],\n            [14,15,16,17],\n            [21,22,23,24],\n            [28,29,30,31],\n            [35,36,37,38],\n\n            //column 2-5\n            [1,2,3,4],\n            [8,9,10,11],\n            [15,16,17,18],\n            [22,23,24,25],\n            [29,30,31,32],\n            [36,37,38,39],\n\n             //column 3-6\n             [2,3,4,5],\n             [9,10,11,12],\n             [16,17,18,19],\n             [23,24,25,26],\n             [30,31,32,33],\n             [37,38,39,40],\n              //column 4-7\n             [3,4,5,6],\n             [10,11,12,13],\n             [17,18,19,20],\n             [24,25,26,27],\n             [31,32,33,34],\n             [38,39,40,41],\n            \n        ]\n\n        for (const combination of connect4Win){ //if a = b = c =d and matches a combination then winning combo is found\n            const [a,b,c,d] = combination;\n\n            if (this.board[a] && (this.board[a] === this.board[b] && this.board[a] === this.board[c] && this.board[a] === this.board[d])){\n                return combination;\n            } //if there is a value at index A and it = to the value at B and C then win;\n        }\n        return null;\n\n    \n    \n    }\n    inProgress(){ //checks is theres any winning combo or if the board is full.\n        return !this.findWin() && this.board.includes(null);\n    }\n    \n}\n\nexport default Game;","import React from 'react';\nimport Game from './Game';\n\nlet game = new Game();\n\n\nclass BoardSlot extends React.Component{ //board slot, each board has a class name for the grid, caption for the array and onclick func\n    render(){\n        return(\n            <div className = {this.props.className} caption = {this.props.caption} onClick = {this.props.onClick} >\n                \n            </div>\n        \n        );\n    }\n}\n\nclass Board extends React.Component{\n\n    renderBoardSlot(boardSlot,num){ //renders a board slot, updates the game based on the click, and if it is in progress\n        return(\n            <BoardSlot className = {boardSlot} caption= {num} onClick = {()=>{   \n                                                        \n                                                        let winningCombo = game.findWin();\n                                                        let inProg = game.inProgress();\n\n                                                        if (inProg){ //if game is inprogress then if selected game slot is empty\n                                                                     // then run the game.move method. Slot is now either yellow or red\n                                                                     // then change the header's turn into the current turn and colour.\n                                                                     //the background color of slot changes to the player(colour) that clicked on the slot.\n                                                            if (game.board[num] ==null){\n                                                                game.move(num);\n                                                                document.getElementById(\"header_Turn\").textContent = game.turn +\"'s turn\";\n                                                                document.getElementById(\"header_Turn\").style.color = game.turn;\n                                                                document.getElementsByClassName(\"board_Slot\")[num].style.background = game.board[num];\n                                                                winningCombo = game.findWin();\n                                                                inProg = game.inProgress();\n                                                            }\n                                                        }\n                                                        //if not in progress, find winning combo throughout the board\n                                                        //if winningcombination is found then the player that won is displayed on the header\n                                                        if (!inProg){\n                                                            if(winningCombo){\n                                                                    for (let i = 0; i<game.board.length; i++){\n                                                                    \n                                                                    if (winningCombo && winningCombo.includes(i)){\n                                                                        document.getElementById(\"header_Turn\").textContent = \"Winner: \" + game.board[i];\n                                                                        document.getElementById(\"header_Turn\").style.color = game.board[i];\n                                                                    }   \n                                                                }\n                                                            }\n                                                            //if no winner is found then it is a tie.\n                                                            else{\n                                                                document.getElementById(\"header_Turn\").textContent = \"TIE\";\n                                                                \n                                                            }\n                                                            \n                                                        }                                                                                                                                                                           \n                                                    }}/>\n\n        );\n\n    }\n\n    render(){ //renders the html also allows game to restart with button.\n        let num = 0;\n        let boardSlot = \"board_Slot\";\n        //App body\n            //header\n            //board\n            //footer/restart button\n        return(\n            <div id = 'app'> \n                <div id = 'header'> Connect 4 \n                    <div id = \"header_Space\"></div>\n                    <div id = \"header_Turn\">\n                        Yellow's turn\n                    </div>\n                    \n\n                </div>\n            \n                <div className= \"board\"> \n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    \n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                    {this.renderBoardSlot(boardSlot, num++)}\n                </div>\n                <div id =\"footer\">\n                    <div id = \"footer_Restart\" onClick = {() =>{game = new Game();\n                                                                document.getElementById(\"header_Turn\").textContent = game.turn +\"'s turn\";\n                                                                for (let i = 0; i<game.board.length; i++){\n                                                                    document.getElementsByClassName(\"board_Slot\")[i].style.background = \"#ffffff\"\n                                                                }\n                                                            }}>\n                            Restart Game\n                    </div>\n                </div>\n            </div>\n        \n            \n        );\n    }\n}\n\nexport default  Board;\n\n\n","import React from \"react\";\nimport Board from \"./board\";\n\n//home page\nfunction Home(props){\n    return(\n        <h1 id = \"homeText\">\n            Connect Four\n        </h1>\n    );\n}\n//game page\nfunction GamePage(props){\n    \n    return(\n        <div>\n            <Board/>\n        </div>\n    );      \n}\n\n\nexport {Home, GamePage}","import './App.css';\n\nimport {Home,GamePage} from './screens'\nimport ReactDOM from 'react-dom'\n\n\n\nfunction App() {\n  //Home page with a button to enter the game\n  return ( \n    <div id = \"page\">\n      <div>\n        <Home/>\n      \n        <button id = \"playButton\" onClick = {()=> {ReactDOM.render(<GamePage/>, document.getElementById('root'))}} > \n              Play\n        </button>\n      </div>\n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}